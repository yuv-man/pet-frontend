[{"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\index.js":"1","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Signup.jsx":"2","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\MyPets.jsx":"3","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Login.jsx":"4","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogProfile.jsx":"5","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogsList.jsx":"6","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\UpdatePetForm.jsx":"7","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogForm.jsx":"8","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Dashboard.jsx":"9","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\libs\\DogContext.jsx":"10","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\libs\\api.js":"11","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\UserProfile.jsx":"12","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogBubble.jsx":"13","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\UserModal.jsx":"14","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\SearchForm.jsx":"15","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\MyPetBubble.jsx":"16","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Home.jsx":"17","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\HomePage.jsx":"18"},{"size":500,"mtime":1606646930952,"results":"19","hashOfConfig":"20"},{"size":6015,"mtime":1610224198250,"results":"21","hashOfConfig":"20"},{"size":1539,"mtime":1610299895300,"results":"22","hashOfConfig":"20"},{"size":3150,"mtime":1610210344466,"results":"23","hashOfConfig":"20"},{"size":3099,"mtime":1610299866098,"results":"24","hashOfConfig":"20"},{"size":1038,"mtime":1610300044374,"results":"25","hashOfConfig":"20"},{"size":7475,"mtime":1610299918458,"results":"26","hashOfConfig":"20"},{"size":5999,"mtime":1610299857558,"results":"27","hashOfConfig":"20"},{"size":4156,"mtime":1610299846816,"results":"28","hashOfConfig":"20"},{"size":86,"mtime":1608540407742,"results":"29","hashOfConfig":"20"},{"size":5078,"mtime":1610299940047,"results":"30","hashOfConfig":"20"},{"size":4310,"mtime":1610224053835,"results":"31","hashOfConfig":"20"},{"size":1042,"mtime":1610224322734,"results":"32","hashOfConfig":"20"},{"size":1854,"mtime":1609953957122,"results":"33","hashOfConfig":"20"},{"size":3198,"mtime":1610224195011,"results":"34","hashOfConfig":"20"},{"size":1885,"mtime":1609961193861,"results":"35","hashOfConfig":"20"},{"size":795,"mtime":1610299223326,"results":"36","hashOfConfig":"20"},{"size":3835,"mtime":1610210116235,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1bjdhn2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\index.js",[],["86","87"],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Signup.jsx",["88"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { DogContext } from '../libs/DogContext'\r\nimport cartoonDogs from '../images/cartoonDogs.jpg'\r\nimport './signUpModal.css'\r\nimport { createToken, signup } from '../libs/api'\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\n\r\nfunction SignUp() {\r\n\r\n    const { setIsLogin, errorMessage, setErrorMessage, \r\n            setFirstName, loading, setLoading } = useContext(DogContext);\r\n    const [ userProfile, setUserProfile ] = useState({firstName: '', lastName: '', phoneNumber: '',\r\n        password:'', email:'', admin:'false', bio:'' });\r\n    const [ isOpen, setIsOpen ] = useState( false );\r\n    const [ confirmPassword, setConfirmPassword ] = useState('');\r\n    const [ message, setMessage ] = useState('')\r\n    const history = useHistory()\r\n\r\n    const handleChange = (event) => {    \r\n        setUserProfile((userProfile) => ({...userProfile, [event.target.name]: event.target.value}))\r\n    }\r\n    \r\n    const handleModal = (event) => {\r\n        event.preventDefault();\r\n        setIsOpen( true )\r\n    }\r\n\r\n    const handleModalClose = (event) => {\r\n        event.preventDefault();\r\n        setUserProfile({firstName: '', lastName: '', phoneNumber: '',\r\n                password:'', email:''});\r\n        setConfirmPassword('');\r\n        setErrorMessage( false )\r\n        setIsOpen( false )\r\n    }\r\n\r\n    const checkPassword = async () => {\r\n        if(userProfile.password === confirmPassword){\r\n            const result = await signup( \r\n                userProfile.firstName, userProfile.lastName,\r\n                userProfile.email, userProfile.phoneNumber, userProfile.password)\r\n            if(typeof result === 'object'){\r\n                console.log(result[0])\r\n                createToken( userProfile.email );\r\n                localStorage.setItem('currentUser', result[0])\r\n                setFirstName(userProfile.firstName)\r\n                setIsOpen( false )\r\n                setIsLogin( true )\r\n                setUserProfile({firstName: '', lastName: '', phoneNumber: '',\r\n                    password:'', email:''});\r\n                setConfirmPassword('');\r\n                history.push('/')\r\n\r\n            }else{\r\n                setMessage(result)\r\n                setErrorMessage( true )\r\n            }\r\n        } else {\r\n            setMessage('Confirmation password is not correct')\r\n            setErrorMessage( true )\r\n        }\r\n    }\r\n\r\n    const handleModalSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!userProfile.firstName){\r\n            setMessage('first name is missing')\r\n            setErrorMessage( true )\r\n        } else if (!userProfile.lastName){\r\n            setMessage('last name is missing')\r\n            setErrorMessage( true )\r\n        } else if (!userProfile.phoneNumber){\r\n            setMessage('phone number is missing')\r\n            setErrorMessage( true )\r\n        } else if (!userProfile.email){\r\n            setMessage('email is missing')\r\n            setErrorMessage( true )\r\n        } else if (!userProfile.password){\r\n            setMessage('password is missing')\r\n            setErrorMessage( true )\r\n        } else {\r\n            setLoading( true )\r\n            checkPassword()\r\n            setLoading( false )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setErrorMessage( false )\r\n    }, [])\r\n\r\n    return (\r\n        <div className='sign-up-form'>\r\n            <input className='sign-up' type='submit' \r\n                onClick = {(event)=>{handleModal(event)}} value='Sign Up'/>\r\n\r\n            <Modal  style={{ content: { width : '60%', borderRadius: '20px',\r\n                display: 'flex', flexFlow: 'row nowrap', alignItems: 'center' } }} \r\n                isOpen = {isOpen}>\r\n                <form className='right-side'>\r\n                <input className='close' type='submit' \r\n                    onClick = {(event)=>{handleModalClose(event)}} value='x'/>\r\n                <h1 className='sign-title'>Create Account</h1>\r\n                <div className='names'>\r\n                <input id='first-name' type='text' name='firstName'\r\n                    placeholder='Your First Name...' required \r\n                    value= {userProfile.firstName}\r\n                    onChange = {handleChange}\r\n                />\r\n                <input type='text' placeholder='Your Last Name...' name='lastName' \r\n                    value= {userProfile.lastName} required\r\n                    onChange = {handleChange}\r\n                />\r\n                </div>\r\n                <input className='inputs' type='tel' placeholder='Your Phone number...' \r\n                    name= 'phoneNumber' value= {userProfile.phoneNumber} required\r\n                    onChange = {handleChange}\r\n                />\r\n                <input className='inputs' type='email' placeholder='Your Email...' \r\n                    name = 'email' value= {userProfile.email} required\r\n                    onChange = {handleChange}\r\n                />\r\n                <input className='inputs' type='password' placeholder='Your password.' \r\n                    name = 'password' value= {userProfile.password} \r\n                    onChange = {handleChange}\r\n                />\r\n                <input className='inputs' type='password' placeholder='confirm password.' \r\n                    value= {confirmPassword}\r\n                    onChange = {(event) => setConfirmPassword(event.target.value)}\r\n                />\r\n                {errorMessage?<h3 className='error' >{message}</h3>:null}\r\n                <input id='sign-in' type='submit' \r\n                    onClick = {(event)=>{handleModalSubmit(event)}} value='Sign Up'/>\r\n                    <ClipLoader loading={loading} />\r\n                </form>\r\n                <img id='dogCartoon' src={cartoonDogs} alt='dogs'/>\r\n            </Modal>          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\MyPets.jsx",["89","90","91"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { getMyPets } from '../libs/api'\r\nimport MyPetBubble from './MyPetBubble'\r\nimport { DogContext } from '../libs/DogContext'\r\nimport { useHistory } from 'react-router-dom'\r\nimport sadShibaInu from '../images/sad-shiba-inu.png'\r\n\r\nfunction MyPets() {\r\n\r\n\r\n    // const baseUrl = 'http://localhost:5000'\r\n    const baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n    const { isLogin, myPets, setMyPets, update } = useContext(DogContext)\r\n    const history = useHistory()\r\n    const avatarPath = `${baseUrl}/pets/`\r\n\r\n\r\n    const myDogs = async() => {\r\n        const userId = await localStorage.getItem('currentUser')\r\n        const id = userId.substring(1, userId.length - 1)\r\n        let pets = await getMyPets(id);\r\n        setMyPets(pets)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(isLogin){\r\n            myDogs()\r\n        } else {\r\n            history.push('/')\r\n        }\r\n    }, [isLogin, update])\r\n\r\n    return (\r\n        <div className='dogList'>\r\n        {myPets ? myPets.map(pet => \r\n            <MyPetBubble key = {pet._id} \r\n                name = {pet.dogName} type = {pet.dogType} \r\n                status = {pet.status} avatar = { avatarPath + pet.picture } \r\n                petId = {pet._id} \r\n                dogGender = {pet.dogGender} />\r\n        ): <div className='sad-shiba-inu'>\r\n            <img src={sadShibaInu}/>\r\n            <br/> <h1>No pets in your list</h1>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPets\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Login.jsx",[],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogProfile.jsx",["92"],"import React, { useContext } from 'react'\r\nimport { DogContext } from '../libs/DogContext'\r\nimport './doggie.css'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { FaMars } from 'react-icons/fa';\r\nimport { FaVenus } from 'react-icons/fa';\r\nimport { FaRuler } from 'react-icons/fa';\r\nimport { FaWeightHanging } from 'react-icons/fa';\r\nimport { updateDogStatus, addPetToList } from '../libs/api'\r\n\r\nfunction DogProfile(props) {\r\n\r\n    // const baseUrl = 'http://localhost:5000'\r\n    const baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n    const { pets, setPets, isLogin } = useContext(DogContext)\r\n    const id = (props.match.params.dogId);\r\n    let petObj = {};\r\n\r\n    const getPet = (id) =>{\r\n        const thePet = pets.filter(pet => pet._id === id);\r\n        petObj = thePet[0];\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const localId = await localStorage.getItem('currentUser')\r\n        const userId = localId.substring(1, localId.length - 1);\r\n        updateDogStatus(event.target.name, userId , id)\r\n        addPetToList(event.target.name, id, userId)\r\n    }\r\n\r\n    const avatarPath = `${baseUrl}/pets/`\r\n    \r\n    getPet(id);\r\n\r\n    return (\r\n        <div>\r\n        <div className='bubble'>\r\n            <div className='dog-profile'>\r\n                <div className='image'>\r\n                    <img className='petImage' src={avatarPath + petObj.picture} alt={petObj.dogName}/>\r\n                </div>\r\n                <div className='info-bubble'>\r\n                <div>\r\n                    <div className='name-gender'>\r\n                        <h1 className='dog-name'>{petObj.dogName}</h1>\r\n                        {petObj.dogGender==='male'? <h1><FaMars /></h1>:<h1><FaVenus /></h1>}\r\n                    </div>\r\n                        <h3>Type: {petObj.dogType}</h3>\r\n                        <h3>Status: {petObj.status}</h3>\r\n                        <h3>Hypoallergenic: {petObj.hypoallergenic}</h3>\r\n                        <h3>Dietary restrictions: {petObj.dietary}</h3>      \r\n                        <div className='rectungale'>\r\n                            <h4><FaRuler style={{fontSize:'20px', marginBottom:'1rem'}}/><br/>\r\n                            height: {petObj.height} cm</h4>  \r\n                        </div>\r\n                        <div className='rectungale'>\r\n                            <h4><FaWeightHanging style={{fontSize:'20px', marginBottom:'1rem'}} /><br/>weight: {petObj.weight} kg</h4> \r\n                        </div>\r\n                </div>\r\n                    <p>{petObj.comment}</p>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n            {isLogin && petObj.status === 'available' && <div >\r\n                <button className='adopt' type='click' name='Adopt'\r\n                    onClick={handleSubmit}>Adopt</button>\r\n                <button className='foster' type='click' name='Foster'\r\n                    onClick={handleSubmit}>Foster</button>\r\n            </div>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(DogProfile);\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogsList.jsx",["93"],"import React, {  useContext, useEffect } from 'react'\r\nimport DogBubble from './DogBubble'\r\nimport { DogContext } from '../libs/DogContext';\r\n\r\nfunction DogsList() {\r\n\r\n\r\n    // const baseUrl = 'http://localhost:5000'\r\n    const baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n    const { pets, setPets } = useContext(DogContext)\r\n\r\n    const getData = async() => {\r\n        const response = await fetch(`${baseUrl}/pets`);\r\n        const data = await response.json();\r\n        setPets(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    const avatarPath = `${baseUrl}/pets/`\r\n\r\n    return (\r\n        <div className='dogList'>\r\n        {pets.length !== 0 ? pets.map(pet => \r\n            <DogBubble key = {pet._id} \r\n                name = {pet.dogName} type = {pet.dogType} \r\n                status = {pet.status} avatar = { avatarPath + pet.picture } petId = {pet._id}\r\n                dogGender = {pet.dogGender} />\r\n        ): <h1>No pets found</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DogsList\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\UpdatePetForm.jsx",["94","95","96"],"import React, { useState, useEffect } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './dogForm.css'\r\nimport { getDogInfo } from '../libs/api'\r\n\r\nfunction UpdatePetForm(props) {\r\n\r\n    // const baseUrl = 'http://localhost:5000'\r\n    const baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n    const [ dogProfile, setDogProfile ] = useState({\r\n        dogName: '',status:'', height:'',weight:'',hypoallergenic:'',\r\n        dietary: '', comment: '', dogType:'',dogGender:''\r\n    })\r\n    const [ message, setMessage ] = useState('')\r\n    const [ avatar, setAvatar ] = useState('');\r\n    const handleImage = (event) => {\r\n        if (event.target.files[0]){\r\n            setAvatar(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {    \r\n        setDogProfile((dogProfile) => ({...dogProfile, [event.target.name]: \r\n            event.target.value}))\r\n        setMessage('')\r\n    }\r\n\r\n    const postData = async(id) => {\r\n        let formData = new FormData();\r\n        if(avatar){\r\n            formData.append('avatar', avatar);\r\n            formData.append('dogProfile', JSON.stringify(dogProfile))\r\n            const response = await fetch(`${baseUrl}/pets/updateFile/${id}`,{ \r\n                method:'PUT',\r\n                body: formData\r\n                })\r\n                const res = await response.json()\r\n                return ('changes saved successfully')\r\n        } else {\r\n            const response = await fetch(`${baseUrl}/pets/update/${id}`,{ \r\n                method:'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(dogProfile)\r\n                })\r\n                const res = await response.json()\r\n                return ('changes saved successfully')\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const result = await postData(props.match.params.id);\r\n        setMessage(result)\r\n        setAvatar('')\r\n    } \r\n    \r\n    const setProfile = async()=>{\r\n        const id = props.match.params.id\r\n        const dog = await getDogInfo(id)\r\n        setDogProfile(dog)\r\n            return dog\r\n    } \r\n\r\n    useEffect(() => {\r\n            setProfile()\r\n            setMessage('')\r\n    }, [])     \r\n\r\n    return (\r\n        <div>\r\n            <form className='form'>\r\n                <h1 className='pet-title'>Update Dog Profile</h1>\r\n                \r\n                <div className='formInputs'>\r\n                <div className='fullInput'>\r\n                    <label htmlFor=\"dogName\">Dog's name</label>\r\n                    <input className='petInput' type='text' name='dogName' \r\n                        value= {dogProfile.dogName}\r\n                        onChange = {handleChange}\r\n                    />\r\n                </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='dogStatus'>Status</label>\r\n                        <select className='petInput' name = 'status' id='status'\r\n                            onChange = {handleChange}>\r\n                            <option value={dogProfile.status}>{dogProfile.status}</option>\r\n                            {dogProfile.status==='available'?null:\r\n                                <option value='available'>available</option>}\r\n                            {dogProfile.status==='Foster'?null:\r\n                                <option value='foster'>foster</option>}\r\n                            {dogProfile.status==='Adopt'?null:\r\n                                <option value='adopt'>adopt</option>}\r\n                        </select>                          \r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor=\"height\">Height</label>\r\n                        <input className='petInput' type='number' name='height' \r\n                            value= {dogProfile.height}\r\n                            onChange = {handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor=\"weight\">Weight</label>\r\n                        <input className='petInput' type='number' name='weight'  \r\n                            value= {dogProfile.weight}\r\n                            onChange = {handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='type'>Dog's type</label>\r\n                        <input className='petInput' type='text' id='type' name='dogType'\r\n                            value={dogProfile.dogType}\r\n                        onChange = {handleChange}>\r\n                        </input> \r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='dogGender'>Dog gender</label>\r\n                        <select className='petInput' name='dogGender' id='dogGender'\r\n                        onChange = {handleChange}>\r\n                            <option value={dogProfile.dogGender}>{dogProfile.dogGender}</option>\r\n                            {dogProfile.dogGender==='female' ?<option value='male'>Male</option>:\r\n                            <option value='female'>Female</option>}\r\n                        </select> \r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='Dietary'>Dietary restrictions</label>\r\n                        <input className='petInput' type='text' name='dietary'\r\n                            value= {dogProfile.dietary}\r\n                            onChange = {handleChange}\r\n                        />\r\n                    </div>\r\n                        <div className='fullInput'>\r\n                        <label htmlFor='hypoallergenic'>Hypoallergenic</label>\r\n                        <select className='petInput' name='hypoallergenic' id='hypoallergenic'\r\n                        onChange = {handleChange}>\r\n                            <option value={dogProfile.hypoallergenic}>{dogProfile.hypoallergenic}</option>\r\n                            {dogProfile.hypoallergenic==='yes' ?<option value='no'>No</option>:\r\n                            <option value='yes'>Yes</option>}\r\n                        </select> \r\n                    </div>\r\n                        <textarea id = 'desc' rows=\"5\" cols=\"50\" name='comment' \r\n                            className='petInput' type='text' placeholder=\"Pet's description\"\r\n                            value= {dogProfile.comment}\r\n                            onChange = {handleChange}\r\n                        /> \r\n                    <div>\r\n                        <div id='dog-photo'>   \r\n                        <label>Dog Image</label>\r\n                        <input type='file'  \r\n                            onChange = {(event) => handleImage(event)}\r\n                        /> \r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                        {message&&<div className='msg'>\r\n                            {message}\r\n                        </div>}\r\n                <input id='add-pet' type='submit' style={{backgroundColor: '#2A1B40'}}\r\n                    onClick = {(event)=>{handleSubmit(event)}} value='Update pet'/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(UpdatePetForm)\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogForm.jsx",["97"],"import React, { useState } from 'react'\r\nimport './dogForm.css'\r\n\r\nfunction DogForm() {\r\n\r\n    // const baseUrl = 'http://localhost:5000'\r\n    const baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n    const [ dogProfile, setDogProfile ] = useState({\r\n        dogName: '',status:'available', height:'',weight:'',hypoallergenic:'no',\r\n        dietary: '', comment: '', dogType:'',dogGender:'male'\r\n    })\r\n    const [ avatar, setAvatar ] = useState('');\r\n    const [ newPet, setNewPet ] = useState('')\r\n    const handleImage = (event) => {\r\n        if (event.target.files[0]){\r\n            setAvatar(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {    \r\n        setDogProfile((dogProfile) => ({...dogProfile, [event.target.name]: event.target.value}))\r\n    }\r\n\r\n    const postData = () => {\r\n\r\n        let formData = new FormData(); \r\n        formData.append('avatar', avatar);\r\n        formData.append('dogProfile', JSON.stringify(dogProfile))\r\n\r\n        \r\n        fetch(`${baseUrl}/pets/uploads`, { \r\n            method:'POST',\r\n            body: formData\r\n            })\r\n            .then(success => { console.log('good job')})\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        setNewPet('new')\r\n        postData();\r\n        setDogProfile({dogName: '',status:'available', height:'',weight:'',hypoallergenic:'no',\r\n        dietary: '', comment: '', dogType:'',dogGender:'male'\r\n        })\r\n        setAvatar('')\r\n    }    \r\n\r\n    return (\r\n        <div>\r\n            <form className='form'>\r\n                <h1 className='pet-title'>Create Dog Profile</h1>\r\n                \r\n                <div className='formInputs'>\r\n                <div className='fullInput'>\r\n                    <label htmlFor=\"dogName\">Dog's name</label>\r\n                    <input className='petInput' type='text' name='dogName' \r\n                        value= {dogProfile.dogName}\r\n                        onChange = {handleChange}\r\n                    />\r\n                </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='dogStatus'>Status</label>\r\n                        <select className='petInput' name = 'status' id='status'\r\n                        onChange = {handleChange}>\r\n                            <option default value='available'>available</option>\r\n                            <option value='foster'>foster</option>\r\n                            <option value='adopt'>adopt</option>\r\n                        </select>                          \r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor=\"height\">Height</label>\r\n                        <input className='petInput' type='number' name='height' \r\n                            value= {dogProfile.height}\r\n                            onChange = {handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor=\"weight\">Weight</label>\r\n                        <input className='petInput' type='number' name='weight'  \r\n                            value= {dogProfile.weight}\r\n                            onChange = {handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='type'>Dog's type</label>\r\n                        <input className='petInput' type='text' id='type' name='dogType'\r\n                            value={dogProfile.dogType}\r\n                        onChange = {handleChange}>\r\n                        </input> \r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='dogGender'>Dog gender</label>\r\n                        <select className='petInput' name='dogGender' id='dogGender'\r\n                        onChange = {handleChange}>\r\n                            <option value='male' default>Male</option>\r\n                            <option value='female'>Female</option>\r\n                        </select> \r\n                    </div>\r\n                    <div className='fullInput'>\r\n                        <label htmlFor='Dietary'>Dietary restrictions</label>\r\n                        <input className='petInput' type='text' name='dietary'\r\n                            value= {dogProfile.dietary}\r\n                            onChange = {handleChange}\r\n                        />\r\n                    </div>\r\n                        <div className='fullInput'>\r\n                        <label htmlFor='hypoallergenic'>Hypoallergenic</label>\r\n                        <select className='petInput' name='hypoallergenic' id='hypoallergenic'\r\n                        onChange = {handleChange}>\r\n                            <option value='no' default>No</option>\r\n                            <option value='yes'>Yes</option>\r\n                        </select> \r\n                    </div>\r\n                        <textarea id = 'desc' rows=\"5\" cols=\"50\" name='comment' \r\n                            className='petInput' type='text' placeholder=\"Pet's description\"\r\n                            value= {dogProfile.comment}\r\n                            onChange = {handleChange}\r\n                        /> \r\n                    <div>\r\n                        \r\n                        <div id='dog-photo'>   \r\n                        <label>Dog Image</label>\r\n                        <input type='file'  \r\n                            onChange = {(event) => handleImage(event)}\r\n                        /> \r\n                        </div>\r\n                        </div>\r\n                </div>\r\n                <input id='add-pet' type='submit' \r\n                    onClick = {(event)=>{handleSubmit(event)}} value='Add pet'/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DogForm\r\n\r\n// Type: French Buldog","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Dashboard.jsx",["98"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { DogContext } from '../libs/DogContext'\r\nimport UserModel from './UserModal'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport { FaUserShield } from 'react-icons/fa';\r\nimport { FaUser } from 'react-icons/fa';\r\nimport { getUsers, removeDog, removeDogFromUsers, \r\n        removeUser, updateUser,removeOwner } from '../libs/api'\r\nimport './dashboard.css'\r\n\r\nfunction Dashboard() {\r\n\r\n    // const baseUrl = 'http://localhost:5000'\r\n    const baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n    const { pets, setPets, isLogin, update, setUpdate } = useContext(DogContext)\r\n    const [ users, setUsers ] = useState()\r\n    const history = useHistory()\r\n\r\n    const allUsers = async() =>{\r\n        const data = await getUsers()\r\n        setUsers(data)\r\n    }\r\n\r\n    const setAdmin = async(user) => { \r\n        console.log(user)\r\n        if(user.admin){\r\n            user.admin = false\r\n        } else {\r\n            user.admin = true    \r\n        }\r\n        updateUser(user._id, user)\r\n        setUpdate(update + 1)\r\n    }\r\n\r\n    const deleteUser = (user) => {\r\n        let messege = window.confirm(\"Are you sure you want to delete the user?\");\r\n        if (messege === true) {\r\n            removeOwner(user._id)\r\n            removeUser(user._id)\r\n            setUpdate(update - 1)\r\n        }\r\n    }\r\n\r\n    const getPets = async() => {\r\n        const response = await fetch(`${baseUrl}/pets`);\r\n        const data = await response.json();\r\n        setPets(data);\r\n    }\r\n\r\n    const deleteDog = (event, id) => {\r\n        event.preventDefault()\r\n        let messege = window.confirm(\"Are you sure you want to delete the dog?\");\r\n        if (messege === true) {\r\n            removeDogFromUsers(id)\r\n            removeDog(id)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isLogin){\r\n            allUsers()\r\n            getPets()\r\n        } else {\r\n            history.push('/')\r\n        }\r\n    }, [isLogin, update]) \r\n\r\n\r\n    return (\r\n        <div className='cont'>\r\n            <div className='users'>\r\n            <h2 className='title-user'>Users</h2>\r\n            {users? users.map(user => \r\n                <div className='userBox' key={user._id}>\r\n                <div className='text'>\r\n                    <h4 className='userName' style={{marginRight: '2rem'}}>{user.firstName} {user.lastName}</h4>\r\n                    <h4>{user.admin?'Administrator':'Pet owner'}</h4> \r\n                </div>\r\n                <div className='btns'>\r\n                    <button className='admin' type='click' onClick={() => setAdmin(user)}>\r\n                    {user.admin?<FaUser/>:<FaUserShield/>}</button>\r\n                        <UserModel id = {user._id} name = {user.firstName + ' ' +user.lastName}\r\n                            phoneNumber ={user.phoneNumber} email = {user.email} />\r\n                    <button type='click' className='delete' \r\n                    onClick={() => deleteUser(user)}> <FaTrash /></button>\r\n                </div>\r\n                </div>\r\n            ):null}\r\n            </div>\r\n            <div className='pets'>\r\n                <h2 className='title-pet' >Pets</h2>\r\n                {pets? pets.map(pet => \r\n                    <div key={pet._id}>\r\n                    <div className='petBox'>\r\n                    <div className='text'>\r\n                        <h4 className='userName' >{pet.dogName}</h4>\r\n                        <h4 className='userName' >{pet.dogType}</h4>\r\n                        <h4 className='userName' >{pet.status}</h4>\r\n                    </div>\r\n                        <div className='updateLink'>\r\n                            <Link to={`/updatePet/${pet._id}`}><FaEdit /></Link>\r\n                        </div>\r\n                        <button className='delete' type='click' \r\n                            onClick={(event) => deleteDog(event, pet._id)} ><FaTrash /></button>\r\n                    </div>\r\n                    </div>):null} \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\libs\\DogContext.jsx",[],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\libs\\api.js",["99","100"],"\r\n// const baseUrl = 'http://localhost:5000'\r\nconst baseUrl = 'https://pet-backend-yuval.herokuapp.com'\r\n\r\nconst signup = async( firstName, lastName, email, phoneNumber, password) =>{\r\n    const response = await fetch(`${baseUrl}/users/signup`,{\r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ firstName, lastName, email, phoneNumber, password })\r\n    })\r\n    let returnResponse\r\n        returnResponse = response.text()\r\n        const result = await returnResponse\r\n    if (!response.ok){\r\n        return result\r\n    } else {\r\n        const userId = [result]\r\n        return userId\r\n    }\r\n}\r\n\r\nconst login = async(email, password) => {\r\n    const response = await fetch(`${baseUrl}/users/login`, {\r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n    })  \r\n    if(response.ok){\r\n        const userId = await response.text()\r\n        return userId\r\n    } else {\r\n        console.log('mistake')\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst createToken = ( email ) =>{\r\n    return fetch(`${baseUrl}/users/token`, {\r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email })\r\n    })  \r\n    .then(res => res.text())\r\n    .then(token => localStorage.setItem('token', token))\r\n    .catch((err) => console.log('i did mistake'))\r\n}\r\n\r\nconst getStorageInfo = async(userId) => {\r\n    const token = await localStorage.getItem('token')\r\n    const response = await fetch(`${baseUrl}/users/${userId}`, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token,\r\n        }\r\n    })\r\n    const data = await response.json()\r\n    return data[0]\r\n}\r\n\r\nconst getUsers = async() => {\r\n    const response = await fetch(`${baseUrl}/users`);\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nconst updateUser = async(userId, data) => {\r\n    const token = localStorage.getItem('token')\r\n    const response = await fetch(`${baseUrl}/users/${userId}`,{\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token,\r\n        },\r\n        body: JSON.stringify({data})\r\n    }) \r\n    const result = await response.json()\r\n    if(result){\r\n        return('changes saved successfully')\r\n    }\r\n}\r\n\r\nconst removeUser = async(id) => {\r\n    const response = await fetch(`${baseUrl}/users/${id}`, {\r\n        method: 'DELETE'\r\n    })\r\n    const data = await response.text()\r\n    return data\r\n}\r\n\r\nconst addPetToList = async( status, petId, userId ) => {\r\n    const token = localStorage.getItem('token')\r\n    const response = await fetch(`${baseUrl}/users/myPets/${userId}`,{\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token,\r\n        },\r\n        body: JSON.stringify({status, petId})\r\n    }) \r\n    const userInfo = await response.json()\r\n    return(userInfo)\r\n}\r\n\r\nconst searchDog = async(something) => {\r\n    const response = await fetch(`${baseUrl}/pets/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }, \r\n        body: JSON.stringify(something)\r\n    })\r\n    const answer = await response.json()\r\n    return answer\r\n}\r\n\r\nconst updateDogStatus = async(status, userId , petId) => {\r\n    const response = await fetch(`${baseUrl}/pets/${petId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }, \r\n        body: JSON.stringify({status, userId})\r\n    })\r\n    const result = await response.json()\r\n}\r\n\r\nconst removeOwner = async(id) => {\r\n    const response = await fetch(`${baseUrl}/pets/owner/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }, \r\n        body: JSON.stringify({id})\r\n    })\r\n    const result = await response.text()\r\n}\r\n\r\nconst getMyPets = async(id) => {\r\n    const response = await fetch(`${baseUrl}/pets/myPets/${id}`)\r\n    let data = await response.json()\r\n    if (data.length < 1){\r\n        data = null\r\n    }\r\n    return data\r\n}\r\n\r\nconst getDogInfo = async(id) => {\r\n    const response = await fetch(`${baseUrl}/pets/update/${id}`)\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nconst removeDog = async(id) => {\r\n    const response = await fetch(`${baseUrl}/pets/delete/${id}`, {\r\n        method: 'DELETE'\r\n    })\r\n    const data = await response.text()\r\n    return data\r\n}\r\n\r\nconst removeDogFromUsers = async(id) => {\r\n    const response = await fetch(`${baseUrl}/users/removeDog/${id}`, {\r\n        method: 'DELETE'\r\n    })\r\n    const data = await response.text()\r\n    console.log(data)\r\n}\r\n\r\n\r\nexport { createToken, getStorageInfo, updateUser, signup, \r\n        login, searchDog, updateDogStatus, addPetToList,\r\n        getMyPets, getDogInfo, removeDog, getUsers, removeDogFromUsers,\r\n        removeUser, removeOwner }","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\UserProfile.jsx",["101"],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\DogBubble.jsx",["102"],"import React from 'react'\r\nimport './dogBubble.css'\r\nimport { FaMars } from 'react-icons/fa';\r\nimport { FaVenus } from 'react-icons/fa';\r\nimport { Link } from 'react-router-dom';\r\nimport { DogContext } from '../libs/DogContext';\r\n\r\nfunction DogBubble(props) {\r\n\r\n\r\n    return (\r\n        <div className='dog-bubble'>\r\n            <img className='dog-image' src={props.avatar} alt={props.name}/>\r\n            <div className='info'>\r\n            <div>\r\n                <div className='name-gender'>\r\n                    <h2>{props.name} </h2>\r\n                    {props.dogGender==='male'? <h2><FaMars /></h2>:<h2><FaVenus /></h2>}\r\n                </div>\r\n                <h4>Type: {props.type}</h4>\r\n                <h4>Status: {props.status}</h4>\r\n            </div>\r\n            <div className='btns'>\r\n                <div className='desc'>\r\n                    <Link to={`DogProfile/${props.petId}`} >More details</Link>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DogBubble","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\UserModal.jsx",["103"],"import React, { useState, useEffect } from 'react'\r\nimport { getMyPets } from '../libs/api'\r\nimport { FaPhone } from 'react-icons/fa';\r\nimport { FaEnvelope } from 'react-icons/fa';\r\nimport { FaDog } from 'react-icons/fa';\r\nimport { FaPaw } from 'react-icons/fa';\r\nimport Modal from 'react-modal'\r\nimport './userModal.css'\r\n\r\nfunction UserModal(props) {\r\n\r\n    const [ isOpen, setIsOpen ] = useState( false );\r\n    const [ myPets, setMyPets ] = useState()\r\n\r\n    const handleModal = () => {\r\n        setIsOpen( true )\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setIsOpen( false )\r\n    }\r\n\r\n    const showPets = async() =>{\r\n        let pets = await getMyPets(props.id);\r\n        setMyPets(pets)\r\n    }\r\n\r\n    useEffect(() => {\r\n        showPets()\r\n    }, [isOpen])\r\n\r\n    return (\r\n        <div className='userBtn'>\r\n            <button type=\"click\" onClick = {handleModal}>Info</button>  \r\n\r\n            <Modal  style={{ content: { width : '30%', height: '20rem', borderRadius: '20px',\r\n                display: 'flex', flexFlow: 'row nowrap', alignItems: 'center' } }} \r\n                isOpen = {isOpen}>\r\n                <div className='info'>\r\n                <h1>{props.name}</h1>\r\n                <h4><FaPhone />     {props.phoneNumber}</h4>\r\n                <h4><FaEnvelope />   {props.email}</h4>\r\n                <div className='dogBox'>\r\n                <h2><FaDog/> User's Pets</h2>\r\n                {myPets? myPets.map(pet => <li key = {pet._id} className='dogProp'>\r\n                <div className='dogName'><FaPaw/>  {pet.dogName}</div>\r\n                <div >{pet.dogType}</div></li>):<div>None</div>}\r\n                </div>\r\n                </div>\r\n                <button className='close' type=\"click\" onClick = {closeModal}>X</button> \r\n            </Modal>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserModal\r\n","C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\SearchForm.jsx",[],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\MyPetBubble.jsx",[],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\Home.jsx",[],"C:\\Users\\yuval\\Desktop\\ITC\\React\\React-project-3\\pet-adoption\\src\\components\\HomePage.jsx",[],["104","105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":95,"column":8,"nodeType":"112","endLine":95,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"118","line":31,"column":8,"nodeType":"112","endLine":31,"endColumn":25,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":42,"column":13,"nodeType":"122","endLine":42,"endColumn":37},{"ruleId":"114","severity":1,"message":"123","line":15,"column":19,"nodeType":"116","messageId":"117","endLine":15,"endColumn":26},{"ruleId":"110","severity":1,"message":"124","line":20,"column":8,"nodeType":"112","endLine":20,"endColumn":10,"suggestions":"125"},{"ruleId":"114","severity":1,"message":"126","line":37,"column":23,"nodeType":"116","messageId":"117","endLine":37,"endColumn":26},{"ruleId":"114","severity":1,"message":"126","line":47,"column":23,"nodeType":"116","messageId":"117","endLine":47,"endColumn":26},{"ruleId":"110","severity":1,"message":"127","line":69,"column":8,"nodeType":"112","endLine":69,"endColumn":10,"suggestions":"128"},{"ruleId":"114","severity":1,"message":"129","line":13,"column":13,"nodeType":"116","messageId":"117","endLine":13,"endColumn":19},{"ruleId":"110","severity":1,"message":"130","line":68,"column":8,"nodeType":"112","endLine":68,"endColumn":25,"suggestions":"131"},{"ruleId":"114","severity":1,"message":"132","line":129,"column":11,"nodeType":"116","messageId":"117","endLine":129,"endColumn":17},{"ruleId":"114","severity":1,"message":"132","line":140,"column":11,"nodeType":"116","messageId":"117","endLine":140,"endColumn":17},{"ruleId":"110","severity":1,"message":"133","line":45,"column":8,"nodeType":"112","endLine":45,"endColumn":17,"suggestions":"134"},{"ruleId":"114","severity":1,"message":"135","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":20},{"ruleId":"110","severity":1,"message":"136","line":30,"column":8,"nodeType":"112","endLine":30,"endColumn":16,"suggestions":"137"},{"ruleId":"106","replacedBy":"138"},{"ruleId":"108","replacedBy":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setErrorMessage'. Either include it or remove the dependency array.","ArrayExpression",["142"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'history' and 'myDogs'. Either include them or remove the dependency array.",["143"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setPets' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["144"],"'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setProfile'. Either include it or remove the dependency array.",["145"],"'newPet' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPets' and 'history'. Either include them or remove the dependency array.",["146"],"'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["147"],"'DogContext' is defined but never used.","React Hook useEffect has a missing dependency: 'showPets'. Either include it or remove the dependency array.",["148"],["140"],["141"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [setErrorMessage]",{"range":"163","text":"164"},"Update the dependencies array to be: [history, isLogin, myDogs, update]",{"range":"165","text":"166"},"Update the dependencies array to be: [getData]",{"range":"167","text":"168"},"Update the dependencies array to be: [setProfile]",{"range":"169","text":"170"},"Update the dependencies array to be: [getPets, history, isLogin, update]",{"range":"171","text":"172"},"Update the dependencies array to be: [history, isLogin]",{"range":"173","text":"174"},"Update the dependencies array to be: [isOpen, showPets]",{"range":"175","text":"176"},[3467,3469],"[setErrorMessage]",[962,979],"[history, isLogin, myDogs, update]",[557,559],"[getData]",[2315,2317],"[setProfile]",[2070,2087],"[getPets, history, isLogin, update]",[1448,1457],"[history, isLogin]",[761,769],"[isOpen, showPets]"]